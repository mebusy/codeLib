# EXAMPLE INI file for clever-disasm (Castlevania)

CertainlyCode $1CA6D JumpWithParams
JumpTableRoutineWithAppendix $1CA6D

MapperChangeRoutine $1C1D8 reg Y
MapperChangeRoutine $1C1D6 reg Y
MapperChangeRoutine $1C1D4 const 6
MapperChangeRoutine $1C1CF ram $27

CertainlyCode $017B Delay30cycles

DataTable $1E12C $1E12D 2 6 SpecialBonusTable
#CertainlyData $1E138 Level1SpecialBonusList
#CertainlyData $1E13C Level2SpecialBonusList
#CertainlyData $1E140 Level3SpecialBonusList
#CertainlyData $1E144 Level4SpecialBonusList
#CertainlyData $1E148 Level5SpecialBonusList
#CertainlyData $1E14C Level6SpecialBonusList

CertainlyData $1FB4F EachStageMusicList

DataTable $1F238 $1F239 2 1 PoseTableA
DataTable $1F23A $1F23B 2 1 PoseTableB

CertainlyData $1EC0A BonusTypeToActorTypeTransTable

CertainlyCode $1C1A7 PlaySFX
CertainlyCode $1C14B StopMusic
CertainlyCode $1FE96 PlayUghSFX
CertainlyCode $1FEA4 SetupPCM
CertainlyData $1FF40 UghSFXdata

CertainlyCode $1E762 PickedUpSomething
CertainlyCode $1E7EB RosaryAcquired
CertainlyCode $1E85E LargeHeartAcquired
CertainlyCode $1E7D6 AmphoraAcquired
CertainlyCode $1E874 BeefAcquired
CertainlyCode $1E801 MultiplierAcquired
CertainlyCode $1E8A5 SacAcquired
CertainlyCode $1E88E WhipAcquired
CertainlyCode $1E7CE DoneAcquiringItem
CertainlyCode $1E83A RedSphereAcquired

CertainlyCode $1E109 SpawnSpecialItem
CertainlyCode $1EBBD SpawnSomething
CertainlyCode $1EBEF SpawnMultiplier
CertainlyCode $1EBE5 SpawnTinyRandomBonusA
CertainlyCode $1EBDD SpawnWhipUpgrade
CertainlyCode $1E0D5 SpawnLargeHeartA
CertainlyCode $1E0D7 SpawnTinyRandomBonusB
CertainlyCode $1E0E9 SpawnLargeHeartB
CertainlyCode $1E28C SpawnRedSphere

CertainlyCode $0000A UpdateBackgroundGFX
CertainlyCode $0038A UpdateMusic
CertainlyCode $00052 UpdateSprites
CertainlyCode $1CCEE ClearSpriteUpdateList
CertainlyCode $1F87D UpdateScoreScrolling
CertainlyCode $1C132 StartPPUupdate
CertainlyCode $1C030 MainLoop
CertainlyCode $1C0EF Bank6_C0EF
CertainlyCode $1C112 Bank6_C112
CertainlyCode $1C8CD ReadInput

CertainlyCode $1C1E4 GameLogic
CertainlyCode $1B7DC GameLogic_Reset
CertainlyCode $1B823 GameLogic_IntroScreen
CertainlyCode $1B859 GameLogic_AutomaticPlay
CertainlyCode $1B8D2 GameLogic_IntroScreenLaunchGame
CertainlyCode $1B911 GameLogic_CastlevaniaGateDemo
CertainlyCode $1C232 GameLogic_GameRunning
CertainlyCode $1C2DE GameLogic_Death
CertainlyCode $1C32C GameLogic_GameOver
CertainlyCode $1C382 GameLogic_DoorScrolling
CertainlyCode $1C4E7 GameLogic_EnterGateSlowly
CertainlyCode $18693 GameLogic_Climbing
CertainlyCode $1C5F5 GameLogic_LevelEnd
CertainlyCode $1C847 GameLogic_Unknown0D
CertainlyCode $186EE GameLogic_FallDownLongPit
CertainlyCode $18B4B GameLogic_PaletteFlashingSomeKind
CertainlyCode $1FB22 GameLogic_Unknown10

CertainlyCode $1C236 GameLogic_GameModeAux_Is_00
CertainlyCode $1C255 GameLogic_GameModeAux_Is_01ge
CertainlyCode $1C258 GameLogic_GameModeAux_Is_01
CertainlyCode $1C299 GameLogic_GameModeAux_Is_02ge
CertainlyCode $1C29C GameLogic_GameModeAux_Is_02
CertainlyCode $1C2B4 GameLogic_GameModeAux_Is_03ge
CertainlyCode $1C2B7 GameLogic_GameModeAux_Is_03
# C2DB = also, CED0
CertainlyCode $1C2DB GameLogic_GameModeAux_Is_04ge
CertainlyCode $1CEE7 GameLogic_GameRunning_Body
CertainlyCode $1E8F0 GameLogic_GameRunning_ObjectAI
CertainlyCode $1E3FF GameLogic_GameRunning_WhipCollisionTester
CertainlyCode $1E922 GameLogic_GameRunning_ObjectAI_loop

JumpTable $154FF $15500 2 15 DraculaAI

CertainlyCode $1EF84 CalculateObjectXdistance

CertainlyCode $1A1E5 KillSimon
CertainlyCode $1CF28 CheckGamePaused

CertainlyData $1C000 Bank7_sig
CertainlyData $18000 Bank6_sig
CertainlyData $14000 Bank5_sig
CertainlyData $0C000 Bank3_sig
# CertainlyData $10000 Bank4_sig -- no signature in this bank
CertainlyData $08000 Bank2_sig
CertainlyData $04000 Bank1_sig
CertainlyData $00000 Bank0_sig

CertainlyCode $1E0F4 GetLevelNumber

CertainlyCode $1C1D4 SwitchBank_Bank6
CertainlyCode $1C1D6 SwitchBank_SaveNewBank
CertainlyCode $1C1D8 SwitchBank
CertainlyCode $1C1CF SwitchBank_Restore

CertainlyCode $1E731 BumpIntoEnemyKillingIt
CertainlyCode $1E734 BumpIntoEnemy

CertainlyCode $1CB2A Give1up

CertainlyCode $1EAB1 ObjectAI_00_04_05
CertainlyCode $14008 ObjectAI_01
CertainlyCode $1F07B ObjectAI_02
CertainlyCode $1F081 ObjectAI_03
CertainlyCode $1EF92 ObjectAI_06
CertainlyCode $143F3 ObjectAI_07
CertainlyCode $14456 ObjectAI_08
CertainlyCode $14389 ObjectAI_09
CertainlyCode $150AA ObjectAI_0A
CertainlyCode $14FD0 ObjectAI_0B
CertainlyCode $1EFB8 ObjectAI_0C
CertainlyCode $1EDBB ObjectAI_0D
CertainlyCode $1F16C ObjectAI_0E
CertainlyCode $14787 ObjectAI_0F
CertainlyCode $1ED6F ObjectAI_10
CertainlyCode $1424D ObjectAI_11
CertainlyCode $1ECF2 ObjectAI_12
CertainlyCode $1517C ObjectAI_13
CertainlyCode $14ADA ObjectAI_14
CertainlyCode $14BF9 ObjectAI_15
CertainlyCode $14C51 ObjectAI_16
CertainlyCode $1DBA1 ObjectAI_17
CertainlyCode $14EB8 ObjectAI_18
CertainlyCode $140C7 ObjectAI_19
CertainlyCode $14644 ObjectAI_1A
CertainlyCode $142C5 ObjectAI_1B
CertainlyCode $149E2 ObjectAI_1C
CertainlyCode $154E6 ObjectAI_1D
CertainlyCode $1535E ObjectAI_1E
CertainlyCode $1493F ObjectAI_1F
CertainlyCode $1EC7A ObjectAI_20_21
CertainlyCode $1463E ObjectAI_22
CertainlyCode $1EB57 ObjectAI_23_26
CertainlyCode $1EB54 ObjectAI_24_25_35
CertainlyCode $14DC6 ObjectAI_27
CertainlyCode $1DD3D ObjectAI_28_29_2A_2B_2C_2D_2E
CertainlyCode $1DE12 ObjectAI_2F
CertainlyCode $1EB5A ObjectAI_30_33
CertainlyCode $1EB65 ObjectAI_31
CertainlyCode $1EC60 ObjectAI_32
CertainlyCode $1EB36 ObjectAI_34

JumpTable $1E95C $1E95D 2 54 ObjectAI_JumpTable 0 5
JumpTable $1E9C8 $1E9C9 2 1 ObjectAI_endPtr 1 5


JumpTable $1F3DD $1F3DE 2 33 UnknownJumpTable 0 6
DataTable $1FB23 $1FB24 2 22 UnknownDataTable 0 4

JumpTable $1C1F4 $1C1F5 2 0 GameLogicJumpTable 0 6
JumpTable $1DD63 $1DD64 2 5 ObjectActionTable1
JumpTable $1DE0C $1DE0D 2 3 ObjectActionTable2
JumpTable $1DE3F $1DE40 2 3 ObjectActionTable3
JumpTable $1EFBE $1EFBF 2 6 ObjectActionTable4
JumpTable $1F087 $1F088 2 7 ObjectActionTable5

# if($79 >= 10)             goto SpawnMultiplier
# if(SpecialWeaponOnScreen
#   or NumberofHearts < 4
#   or (NumberofHearts < 8 and Whip is not smallest)
#   or Whip is largest)     goto SpawnTinyRandomBonus
# else goto SpawnWhip
#


RAM $18 GameMode
# $00 = reset
# $01 = intro screen
# $02 = demo (automatic play)
# $03 = intro screen - start pressed
# $04 = demo (castlevania gates)
# $05 = normal game
# $06 = died?
# $07 = game over
# $08 = door scrolling
# $09 = slowly entering a gate (leftwards)
# $0A = slowly entering a gate (leftwards)
# $0B = climb down
# $0C = level end / map
# $0E = fall down (level 4 begin)
# $0F = palette flashing?
RAM $19 GameModeAux
# various values, seems inc'd and dec'd...
#   0 = ?
#   1 = set at C2B1
#   2 = set at C2B9
#   3 = set in C27F
#  +4 = set at C2A2
#   6 = normal? set at C471
#   8 = set at door scrolling
#  10 = set at C695


RAM $1A FrameCounter

RAM $24 BankNumber6
RAM $27 CurrentBank
RAM $28 CurrentStage
RAM $2E NumberofLives

RAM $3C SimonMovingDirection
# 1=right, 2=left, 4=not scrolling

RAM $3E SimonControllableFlag

RAM $3F SimonYcoord

RAM $40 SimonXcoordLo
RAM $41 SimonXcoordHi

RAM $42 TimeLeftLo
RAM $43 TimeLeftHi

RAM $44 SimonDisplayedHP
RAM $45 SimonActualHP

RAM $64 CurrentMultiplier
RAM $6F CurrentRandomBonusId

RAM $70 WhipLength012
RAM $71 NumberofHearts
RAM $72 SpecialWeaponOnScreen

RAM $79 MultiplierSpawnCounter
# ^ Incremented when special weapon is used to kill something
RAM $7B SpecialItemCounter

RAM $7F InSoundCode

RAM $015B CurrentWeapon

RAM $1A9 Boss1A9
RAM $1AA Boss1AA
RAM $58B Mummy1
RAM $58C Mummy2

# Table sizes are 28 entries.
RAM $300 ObjectUnknown300
RAM $31C ObjectPose
RAM $338 ObjectPaletteIndex
RAM $354 ObjectYcoord
RAM $370 ObjectUnknown354
RAM $38C ObjectScreenXcoordInt
RAM $3A8 ObjectScreenXcoordFrac
RAM $3C4 ObjectUnknown3C4
RAM $3E0 ObjectUnknown3E0
RAM $3FC ObjectXSpeedInt
RAM $418 ObjectXSpeedFrac
RAM $434 ObjectAItype
RAM $450 ObjectUnknown450
RAM $46C ObjectCurrentActionType
# 0=walking or standing

# 1=jumping
# 3=ducking
# 2=whipping
# 4=climbing down
# 5=receiving damage
# 7=falling like a stone
# 9=immobile (crushed knees while falling or received damage)

RAM $488 ObjectJumpLengthCounter
RAM $4A4 ObjectPoseChangeCounter
RAM $4C0 ObjectPoseTableIndex
# 00: [enemy]
# 05: internal function?
# 0A: rosary
# 0C: whip
# 0E: red sac
# 0F: small heart
# 10: beef
# 17: dagger
# 18: axe
# 23: level end
# 2F: multiplier (II)
# 30: multiplier (III)
# 42: large heart
# 43: boomerang
# 44: bottle
# 45: amphora
# 46: stop-watch

RAM $4DC ObjectJumpVar1
RAM $4F8 ObjectJumpVar2
RAM $514 ObjectMovingDownwardsFlag
RAM $530 ObjectScreenXcoordFrac
RAM $54C ObjectUnknown54C
RAM $568 ObjectMultipurposeCounter
RAM $584 ObjectBonusType
# 00 = small heart
# 01 = red sac
# 02 = internal function?
# 03 = whip
# 04 = large heart
# 05 = beef
# 06 = activates level end
# 07 = ghost?
# 08 = dagger
# 09 = boomerang
# 0A = rosary
# 0B = bottle
# 0C = <multiplier> only applicable with #8,#9,#11,#13
# 0D = axe
# 0E = amphora
# 0F = stop-watch
# +10 = blue
# +20 = white
# +30 = red
# +40 = yellow


# $0584 also contains current action.
# $01 = right
# $02 = left
# $04 = crouching
# $08 = press up
# $10 = exiting pause
# $20 = select
# $40 = weapon
# $80 = jump

# SFX numbers are 16 smaller than in castleva.nsf
# $59 = mute music
# $51 = gameover music
# $4E = death music
# $4B = game won music
# $48 = level end music
# $45 = ending
# $42 = final boss 2
# $3F = boss
# $3C = last stage
# $39 = level 5
# $36 = level 4
# $33 = clocktower
# $30 = level 3
# $2d = level 2 music (though also, sac sfx)
# $2A = level 1 music (though also, sac sfx)
# $27 = castlevania gates demo


# STAGE 18 entry:
#   object 0F: type 28
#   object type 2F = powerup (heart, whip..)
#   object type 32 = anything disappearing right now
#   object type 1D = dracula?
#   object type 04 = dracula's head
#   object type 17 = throwing star when thrown
#   object type 35 = dracula's head gone
#   object type 21 = dracula's piece when going phase 2

# DRACULA:
#  Begins in state $_0
#
#   state $_0: waits until $48 is zero (screen scrolled ok)
#              when done, sets delay 120 (hardcoded), new state $81
#   state $_1: waits until delay consumed
#              when done, spawns head,
#                         sets sets delay 60 (hardcoded), new state $82
#   state $_2: waits until delay consumed, does something meanwhile
#              when done, delay remains (0), new state $83
#   state $_3: moves head until head is in place
#              when done, sets sets delay 60 (hardcoded), new state $84
#   state $_4: waits until delay consumed
#              when done, sets sets delay 69 (hardcoded), new state $85
#   state $_5: waits until delay consumed, blinks Dracula's body in the meantime
#              when done, sets sets delay R, new state $06
#         where R is
#           RandomTable9624[CurrentRandomBonusId % 4]
#            where RandomTable9624 contains values: $24,$10,$32,$18
#            and CurrentRandomBonusId is in RAM address $6F
#
#   state $_6: Dracula becomes vulnerable, waits until delay consumed
#              when done, sets sets delay 16 (hardcoded), new state $07
#   state $_7: Dracula prepares to shoot, waits until delay consumed
#              when done, sets sets delay 32 (hardcoded), new state $08
#   state $_8: Dracula shoots, waits until delay consumed
#              when done, sets sets delay 32 (hardcoded), new state $89
#   state $_9: waits until delay consumed, blinks Dracula's head in the meantime
#              when done, sets sets delay 79 (hardcoded), new state $8A
#   state $_A: hides Dracula, waits until delay consumed
#              when done, sets sets delay 32 (hardcoded), new state $8B
#        also, sets X coordinate using this algorithm:
#         X_coordinate = Simon_X + RandomTable96C9[FrameCounter % 8]
#         where RandomTable96C9 contains values: $10,$F8,$80,$60,$30,$D8,$60,$A8
#                                                
#         and FrameCounter is in RAM address $1A
#         calculation result is clamped to $14..$EC range.
#   state $_B: relevantly same as state $_5
#
# CurrentRandomBonusId changes like this:
#   Every iteration of the main loop, CurrentRandomBonusId is set like this:
#     CurrentRandomBonusId = C03Ftable[(FrameCounter | CurrentRandomBonusId) & 15]
#  Where C03Ftable contains:
#    $33,$BB,$3F,$80,$2E,$A9,$61,$87,$AD,$C3,$B2,$C8,$7C,$25,$48,$7A
#
#   Main loop may be run hundreds of iterations every frame, it is unpredictable
#   Basically, it is influenced by the _time_ NMI takes to run
#   For example, if you jump, it is affected (jump causes new code to be run)
#   If you hit a button that is ignored, it is not affected
#
#  And FrameCounter is:
#    increased by 1 every iteration of game logic (every frame)
#    reset to 1 at start of stage (when music starts).. and at door scrolling
