{
  "adapters": {
    "custom-codelldb": {
      "extends": "CodeLLDB",
      "command": [
        "$HOME/.vim/bundle/vimspector/gadgets/macos/CodeLLDB/adapter/codelldb",
        "--port",
        "${unusedLocalPort}"
      ]
    }
  },

  "configurations": {
    "_base": {
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N",
          "raised": "N", // for python
          "userUnhandled": "N"
        }
      }
    },
    "_node": {
      "extends": "_base",
      "adapter": "js-debug",
      "configuration": {
        "type": "pwa-node",
        "skipFiles": ["node_modules/**/*.js", "<node_internals>/**/*.js"]
      }
    },
    "_gorun": {
      "extends": "_base",
      "adapter": "delve",
      "variables": {
        // to disable version check
        "dlvFlags": "--check-go-version=false"
      },
      "configuration": {
        "request": "launch",
        "program": "${fileDirname}",
        // ask user to profice the arguments
        "args": ["*${CommandLineArgs}"],
        "trace": true,
        "env": { "GO111MODULE": "on" },
        "cwd": "${cwd}"
      }
    },

    "[node] attach (debugger port)": {
      "extends": "_node",
      "filetypes": ["javascript"],
      "variables": {
        "debug_port": "${debug_port:9229}"
      },
      "configuration": {
        "request": "attach",
        "port": "${debug_port}"
        // "processId": "$(lsof -ti:\"${debug_port}\")"
      }
    },
    "[node] run (cur opened file)": {
      "extends": "_node",
      "filetypes": ["javascript"],
      "configuration": {
        "request": "launch",
        "stopOnEntry": true,
        "cwd": "${cwd}", // ${workspaceRoot}
        "program": "${file}"
      }
    },
    "[go] run (cur dir)": {
      "extends": "_gorun",
      "filetypes": ["go"],
      "configuration": {
        "mode": "debug"
      }
    },

    "[go] test": {
      "extends": "_gorun",
      "filetypes": ["go"],
      "configuration": {
        "mode": "test"
      }
    },

    "[python] run (cur opened file)": {
      "extends": "_base",
      "adapter": "debugpy",
      "filetypes": ["python"],
      "configuration": {
        "request": "launch",
        "program": "${file}",
        "stopOnEntry": true,
        // ask user to profice the arguments
        // "args": ["*${CommandLineArgs}"]
        "cwd": "${cwd}"
      }
    }, // end python run

    "[python] Attach": {
      // pip install debugpy
      // python -m debugpy --listen 5678 <you-script>.py
      // To wait until the client attaches
      // python -m debugpy --listen 5678 --wait-for-client <you-script>.py
      "extends": "_base",
      "adapter": "multi-session",
      "filetypes": ["python"],
      "configuration": {
        "request": "attach",
        "pathMappings": [
          // mappings here (optional)
        ]
      }
    }, // end python attach

    "[c++ CodeLLDB]": {
      // :VimspectorInstall CodeLLDB
      "adapter": "custom-codelldb",
      "breakpoints": {
        "exception": {
          "cpp_throw": "", // use default settting
          "cpp_catch": ""
        }
      },
      "variables": {
        "BUILDME": {
          "shell": ["/bin/bash", "-c", "g++ -o dbg -g -std=c++17 *.cpp"]
        },
        "arch": {
          "shell": "uname -m"
        }
      },
      "configuration": {
        "cwd": "${cwd}",
        "request": "launch",
        "program": "${cwd}/dbg",
        "stopAtEntry": true,
        "logging": {
          "engineLogging": true
        },
        "targetArchitecture": "${arch}"
      }
    }, // end CodeLLDB

    "[c++ CodeLLDB] a.out": {
      "extends": "[c++ CodeLLDB]",
      "variables": {
        "BUILDME": {
          "shell": ["/bin/sh", "-c", "echo 'no build'"]
        }
      },
      "configuration": {
        "program": "${cwd}/a.out"
      }
    },

    "[c++ lldb] a.out (bug on osx)": {
      "extends": "[c++ CodeLLDB] a.out", // extend from CodeLLDB, only few config is different
      "adapter": "vscode-cpptools",
      "configuration": {
        "MIMode": "lldb",
        "MIDebuggerPath": "$HOME/.vim/bundle/vimspector/gadgets/macos/vscode-cpptools/debugAdapters/lldb/bin/lldb-mi"
      }
    }, // end lldb a.out

    "[c# launch]": {
      // :VimspectorInstall netcoredbg
      "adapter": "netcoredbg",
      "variables": {
        "BUILDME": {
          "shell": ["/bin/bash", "-c", "dotnet build"]
        },
        "relProg": {
          "shell": [
            "/bin/bash",
            "-c",
            "ls *.sln | sed 's|sln|dll|' | xargs -I f001 find bin/Debug/ -maxdepth 2 -type f -name f001"
          ]
        }
      },
      "configuration": {
        "cwd": "${cwd}",
        "request": "launch",
        "program": "${cwd}/${relProg}",
        //"program": "/Volumes/WORK/WORK/JD/jd-socket/test/client/bin/Debug/net6.0/client.dll",
        "args": [],
        "stopAtEntry": true
      }
    } // end csharp
  } // end configurations
}
