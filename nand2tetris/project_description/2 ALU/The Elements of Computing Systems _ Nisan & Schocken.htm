<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0029)http://nand2tetris.org/02.php -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<title>The Elements of Computing Systems / Nisan &amp; Schocken</title>
		<link rel="stylesheet" type="text/css" href="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/style.css">
		<script type="text/javascript" src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/jquery-1.7.1.min.js"></script>		
		<script type="text/javascript" src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/popup.js"></script></head><body><div id="nand_popup" onmouseover="overPopup(true);" onmouseout="overPopup(false);" style="z-index: 200; top: 75px; left: 585px;">|   a   |   b   |  sum  | carry |
|   0   |   0   |   0   |   0   |
|   0   |   1   |   1   |   0   |
|   1   |   0   |   1   |   0   |
|   1   |   1   |   0   |   1   |
</div>		
	
	
		<div class="box">
					
				<a name="top"></a>
				<div class="topbar">
<img class="banner" src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/banner.png" height="100px" alt="Banner">
<span class="titletext">From NAND to Tetris</span>
<span class="subtitletext">Building a Modern Computer From First
Principles</span>
</div>
				<div class="sidemenu">
					<a href="http://nand2tetris.org/" class="menu">Home</a><a href="http://nand2tetris.org/course.php" class="menu_selected">Course</a><a href="http://nand2tetris.org/book.php" class="menu">Book</a><a href="http://nand2tetris.org/software.php" class="menu">Software</a><a href="http://nand2tetris.org/terms.php" class="menu">License</a><a href="http://nand2tetris.org/papers.php" class="menu">Papers</a><a href="http://nand2tetris.org/media.php" class="menu">Talks</a><a href="http://nand2tetris.org/coolstuff.php" class="menu">Cool Stuff</a><a href="http://nand2tetris.org/about.php" class="menu">About</a><a href="http://nand2tetris.org/team.php" class="menu">Team</a><a href="https://docs.google.com/forms/d/e/1FAIpQLSeGtR3QyvmjMubq3ij3h7CBKvDSxd9nnHhkLVZR4YB5FVo8sA/viewform" target="_blank" "="" class="menu">Stay in Touch</a><a href="http://questions-and-answers-forum.32033.n3.nabble.com/" target="_blank" "="" class="menu">Q&amp;A</a>				</div>
			<div class="content">
			<h1>Project 2: Combinational Chips</h1>
<span class="project_desc">Background</span>
<p class="project_text">
The centerpiece of the computer's architecture is the <i>CPU</i>, or <i>Central Processing Unit</i>, and the centerpiece of the CPU is the <i>ALU</i>, or <i>Arithmetic-Logic Unit</i>. In this project you will gradually build a set of chips, culminating in the construction of the <i>ALU</i> chip of the <i>Hack</i> computer.  All the chips built in this project are standard, except for the ALU itself, which differs from one computer architecture to another.
</p>

<span class="project_desc">Objective</span>
<p class="project_text">
Build all the chips described in Chapter 2 (see list below), leading up to an <i>Arithmetic Logic Unit</i> - the Hack computer's ALU. The only building blocks that you can use are the chips described in chapter 1 and the chips that you will gradually build in this project.
</p>


<span class="project_desc">Chips</span>
<table class="tests">
<tbody><tr class="tblheader"> 
	<td>Chip (HDL)</td>
	<td>Description</td>
	<td>Test script</td>
	<td>Compare file</td>
</tr> 
<tr> 
	<td> <a onmouseover="popup(&quot;projects/02/HalfAdder.hdl&quot;, true);"> HalfAdder </a> </td> 
	<td>Half Adder</td> 
	<td> <a onmouseover="popup(&quot;projects/02/HalfAdder.tst&quot;,true);"> HalfAdder.tst </a> </td>
	<td> <a onmouseover="popup(&quot;projects/02/HalfAdder.cmp&quot;,true);"> HalfAdder.cmp </a> </td>
</tr> 
<tr> 
	<td> <a onmouseover="popup(&quot;projects/02/FullAdder.hdl&quot;,true);"> FullAdder </a> </td>
	<td>Full Adder</td>
	<td> <a onmouseover="popup(&quot;projects/02/FullAdder.tst&quot;,true);"> FullAdder.tst </a> </td> 
	<td> <a onmouseover="popup(&quot;projects/02/FullAdder.cmp&quot;,true);"> FullAdder.cmp </a> </td> 
</tr>
<tr>
	<td> <a onmouseover="popup(&quot;projects/02/Add16.hdl&quot;,true);"> Add16 </a> </td>
	<td>16-bit Adder</td>
	<td> <a onmouseover="popup(&quot;projects/02/Add16.tst&quot;,true);"> Add16.tst </a> </td>
	<td> <a onmouseover="popup(&quot;projects/02/Add16.cmp&quot;,true);"> Add16.cmp </a> </td>
</tr>
<tr>
	<td> <a onmouseover="popup(&quot;projects/02/Inc16.hdl&quot;,true);"> Inc16 </a></td> 
	<td>16-bit incrementer</td>
	<td> <a onmouseover="popup(&quot;projects/02/Inc16.tst&quot;,true);"> Inc16.tst </a> </td> 
	<td> <a onmouseover="popup(&quot;projects/02/Inc16.cmp&quot;,true);"> Inc16.cmp </a> </td>
</tr>

<tr>
	<td> <a onmouseover="popup(&quot;projects/02/ALU.hdl&quot;,true);"> ALU </a> </td> 
	<td>Arithmetic Logic Unit (without handling of status outputs)</td> 
	<td> <a onmouseover="popup(&quot;projects/02/ALU-nostat.tst&quot;,true);"> ALU-nostat.tst </a> </td>
	<td> <a onmouseover="popup(&quot;projects/02/ALU-nostat.cmp&quot;,true);"> ALU-nostat.cmp </a> </td>
</tr> 

<tr>
	<td> <a onmouseover="popup(&quot;projects/02/ALU.hdl&quot;,true);"> ALU </a> </td> 
	<td>Arithmetic Logic Unit (complete)</td> 
	<td> <a onmouseover="popup(&quot;projects/02/ALU.tst&quot;,true);"> ALU.tst </a> </td>
	<td> <a onmouseover="popup(&quot;projects/02/ALU.cmp&quot;,true);"> ALU.cmp </a> </td>
</tr> 
</tbody></table>

<span class="project_desc">Proposed Implementation</span>
<p class="project_text">
As usual, we propose building the chips in the order listed above.
</p>
The Hack ALU produces two kinds of outputs: a "main" 16-bit output resulting from operating on the two 16-bit inputs, and two 1-bit "status outputs" named 'zr' and 'ng'. We recommend building this functionality in two stages. In stage one, implement an ALU that computes and outputs the 16-bit output only, ignoring the 'zr' and 'ng' status outputs. Once you get this implementation right (that is, once your ALU.hdl code passes the ALU-nostat test), extend your code to handle the two status outputs as well. This way, any problems detected by ALU.tst can be attributed to the incremental code that you've added in stage two. We thank Mark Armbrust for proposing this staged implementation plan, and for supplying the test files to support it.
<p></p>

<span class="project_desc">Contract</span>
<p class="project_text">
When loaded into the supplied <i>Hardware Simulator</i>, your chip design (modified <span class="code">.hdl</span>
program), tested on the supplied <span class="code">.tst</span> script, should
produce the outputs listed in the supplied <span class="code">.cmp</span> file. If that is not the case, the simulator will let you know.
</p>

<span class="project_desc">Resources</span>
<p class="project_text">
The relevant reading for this project is <a target="_blank" href="http://nand2tetris.org/chapters/chapter%2002.pdf">Chapter 2</a> and <a target="_blank" href="http://nand2tetris.org/chapters/appendix%20A.pdf">Appendix A</a>. Specifically, all the chips described in Chapter 2 should be implemented in the <i>Hardware Description Language</i> (HDL) specified in Appendix A.
</p>

<p class="project_text">
For each chip, we supply a skeletal <span class="code">.hdl</span> file with a missing implementation part. In addition, for each chip we supply a <span class="code">.tst</span> script that instructs the hardware simulator how to test it, and a <span class="code">.cmp</span> ("compare file") containing the correct output that this test should generate. Your job is to complete and test the supplied skeletal <span class="code">.hdl</span> files.
</p>

<p class="project_text">
The resources that you need for this project are the supplied <i>Hardware Simulator</i> and the files listed above. If you've downloaded the <i>Nand2Tstris Software Suite</i>, these files are stored in your <span class="code">projects/02</span> directory. 
</p>

<span class="project_desc">Tips</span>
<p class="project_text">
<b>Use built-in chips:</b> Your HDL programs will most likely include chip parts that you've built in project 1. As a rule, though, we recommend using the built-in versions of these chips instead. The use of built-in chips ensures correct, efficient, and predictable simulation. There is a simple way to accomplish this convention: make sure that your project directory includes only the <span class="code">.hdl</span> files of the chips developed in the current project.
</p>

<p class="project_text">
<b>Implementation order:</b> We recommend building the chips in the order in which they appear in Chapter 2. However, since the simulator features built-in versions of these chips, you can use chip-parts without first building them: 
the simulator will automatically use their built-in implementations.
</p>

			</div>
		</div>
		<div class="small">
			Best viewed with 
							<img src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/compatible_firefox.gif">
							<img src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/compatible_chrome.gif"><br>
			Designed and built by Tali Gutman ©
		</div>
	
	
</body></html>