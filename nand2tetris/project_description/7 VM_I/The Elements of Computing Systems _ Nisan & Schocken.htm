<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0033)http://www.nand2tetris.org/07.php -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<title>The Elements of Computing Systems / Nisan &amp; Schocken</title>
		<link rel="stylesheet" type="text/css" href="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/style.css">
		<script type="text/javascript" src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/jquery-1.7.1.min.js"></script>		
		<script type="text/javascript" src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/popup.js"></script></head><body><div id="nand_popup" onmouseover="overPopup(true);" onmouseout="overPopup(false);" style="display: none; z-index: 200; top: 250px; left: 1020px;"></div>		
	
	
		<div class="box">
					
				<a name="top"></a>
				<div class="topbar">
<img class="banner" src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/banner.png" height="100px" alt="Banner">
<span class="titletext">From NAND to Tetris</span>
<span class="subtitletext">Building a Modern Computer From First
Principles</span>
</div>
				<div class="sidemenu">
					<a href="http://www.nand2tetris.org/" class="menu">Home</a><a href="http://www.nand2tetris.org/course.php" class="menu_selected">Course</a><a href="http://www.nand2tetris.org/book.php" class="menu">Book</a><a href="http://www.nand2tetris.org/software.php" class="menu">Software</a><a href="http://www.nand2tetris.org/terms.php" class="menu">License</a><a href="http://www.nand2tetris.org/papers.php" class="menu">Papers</a><a href="http://www.nand2tetris.org/media.php" class="menu">Talks</a><a href="http://www.nand2tetris.org/coolstuff.php" class="menu">Cool Stuff</a><a href="http://www.nand2tetris.org/about.php" class="menu">About</a><a href="http://www.nand2tetris.org/team.php" class="menu">Team</a><a href="https://docs.google.com/forms/d/e/1FAIpQLSeGtR3QyvmjMubq3ij3h7CBKvDSxd9nnHhkLVZR4YB5FVo8sA/viewform" target="_blank" "="" class="menu">Stay in Touch</a><a href="http://questions-and-answers-forum.32033.n3.nabble.com/" target="_blank" "="" class="menu">Q&amp;A</a>				</div>
			<div class="content">
			<h1>Project 7: Virtual Machine I - Stack Arithmetic</h1>
<span class="project_desc">Background</span>
<p class="project_text">Java (or C#) compilers generate code written in an intermediate language called <i>bytecode</i> (or <i>IL</i>). This code is designed to run on a virtual machine architecture like the JVM (or CLR). One way to implement such VM programs is to translate them further into lower-level programs written in the machine language of some concrete (rather than virtual) host computer. In projects 7 and 8 we build such a <i>VM translator</i>, designed to translate programs written in the VM language into programs written in the Hack assembly language. The VM language, abstraction, and translation process are described in chapters 7 and 8 of the book. For the purpose of this project, chapter 8 can be ignored.
</p>

<span class="project_desc">Objective</span>
<p class="project_text">Build a basic <i>VM translator</i>, focusing on the implementation of the VM language's <i>stack arithmetic</i> and <i>memory access</i> commands. In Project 8, this basic translator will be extended into a full-scale VM translator.
</p>

<span class="project_desc">Contract</span>
<p class="project_text">Write a VM-to-Hack translator, conforming to the <i>VM Specification, Part I </i>(book section 7.2) and to the <i>Standard VM-on-Hack Mapping, Part I</i> (book section 7.3.1). Use your VM translator to translate the VM files supplied below, yielding corresponding programs written in the Hack assembly language. When executed on the supplied <i>CPU emulator</i>, the translated code generated by your translator should deliver the results mandated by the test scripts and compare files supplied below.
</p>
<span class="project_desc">Usage</span>
<p class="project_text">Depending on the programming language that you use, the VM translator should be invoked using something like "<tt>VMTranslator</tt> <i>fileName</i><tt>.vm</tt>", where the string <i>fileName</i><tt>.vm</tt> is the translator's input, i.e. the name of a text file containing VM commands. The translator creates an output file named <i>fileName</i><tt>.asm</tt>, which is stored in the same directory of the input file. The name of the input file may contain a file path.
</p>
<span class="project_desc">Resources</span>
<p class="project_text">
The relevant reading for this project is chapter 7. You will need two tools: the programming language with which you will implement your VM translator, and the supplied <i>CPU emulator</i>. This emulator allows executing, and testing, on your PC, the machine code generated by your VM translator. Another tool that comes handy in this project is the supplied <i>VM emulator</i>. The VM emulator (described at the bottom of this page) allows experimenting with the supplied VM programs before setting out to write your VM translator.
</p> 

<span class="project_desc">Proposed Implementation</span>
<p class="project_text">
We propose implementing the basic VM translator API described in chapter 7 in two stages. This will allow you to unit-test your implementation incrementally, using the test programs supplied below. In what follows, when we say "your VM translator should implement some VM command" we mean "your VM translator should translate the given VM command into a sequence of Hack assembly commands that accomplish the same task". 
</p>

<p class="project_text">
<b>Stage I: Handling stack arithmetic commands:</b> The first version of your basic VM translator should implement the nine arithmetic / logical commands of the VM language as well as the VM command <span class="code">push</span> <span class="code">constant</span> x.
</p>

<p class="project_text">The latter command is the generic <span class="code">push</span> command for which the first argument is <span class="code">constant</span> and the second argument is some non-negative integer x. This command comes handy at this early stage, since it helps provide values for testing the implementation of the arithmetic / logical VM commands. For example, in order to test how your VM translator handles the VM <span class="code">add</span> command, we can test how it handles the VM code <span class="code">push</span> <span class="code">constant</span> <span class="code">3</span>, <span class="code">push</span> <span class="code">constant</span> <span class="code">5</span>, <span class="code">add</span>. The other arithmetic and logical commands are tested similarly.</p>
<p></p>

<p class="project_text">
<b>Stage II: Handling memory access commands:</b> The next version of your basic VM translator should include a full implementation of the VM language's <span class="code">push</span> and <span class="code">pop</span> commands, handling the eight memory segments described in chapter 7. We suggest breaking this stage into the following sub-stages:
</p><ol>
	<li>You have already handled the <span class="code">constant</span> segment;</li>
	<li>Next, handle the segments <span class="code">local</span>, <span class="code">argument</span>, <span class="code">this</span>, and <span class="code">that</span>; </li>
	<li>Next, handle the <span class="code">pointer</span> and <span class="code">temp</span> segments, in particular allowing modification of the bases of the <span class="code">this</span> and <span class="code">that</span> segments.</li>
	<li>Finally, handle the <span class="code">static</span> segment.</li>
</ol>
<p></p>

<span class="project_desc">Testing</span>

<p class="project_text">We supply five VM programs, designed to unit-test the staged implementation proposed above. For each program <span class="code">Xxx</span> we supply four files. The <span class="code">Xxx.vm</span> file contains the program's VM code. The <span class="code">XxxVME.tst</span> script allows running the program on the supplied <i>VM emulator</i>, to experiment with the program’s intended operation. After translating the program using your VM translator, the supplied <span class="code">Xxx.tst</span> script and <span class="code">Xxx.cmp</span> compare file allow testing the translated assembly code on the supplied <i>CPU emulator</i>.
</p>

<p class="project_text">
<b>Testing how the VM translator handles <i>arithmetic commands</i>:</b>
</p> 

<table class="tests">
  <tbody><tr class="tblheader">
    <td>Program</td>
    <td>Description</td>
    <td>Test Scripts</td>
  </tr>
  <tr>
    <td><span class="code">
	
	<a onmouseover="popup(&quot;projects/07/StackArithmetic/SimpleAdd/SimpleAdd.vm&quot;,true);" class="code">SimpleAdd.vm</a>

	</span></td><td>Pushes two constants onto the stack and adds them up.</td>
    <td><a onmouseover="popup(&quot;projects/07/StackArithmetic/SimpleAdd/SimpleAddVME.tst&quot;,true);" class="code">SimpleAddVME.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/StackArithmetic/SimpleAdd/SimpleAdd.tst&quot;,true);" class="code">SimpleAdd.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/StackArithmetic/SimpleAdd/SimpleAdd.cmp&quot;,true);" class="code">SimpleAdd.cmp</a>
    </td>
  </tr>
  <tr>
    <td>	
	<a onmouseover="popup(&quot;projects/07/StackArithmetic/StackTest/StackTest.vm&quot;,true);" class="code">StackTest.vm</a>	
	</td><td>Executes a sequence of arithmetic and logical operations on the stack.</td>
    <td><a onmouseover="popup(&quot;projects/07/StackArithmetic/StackTest/StackTestVME.tst&quot;,true);" class="code">StackTestVME.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/StackArithmetic/StackTest/StackTest.tst&quot;,true);" class="code">StackTest.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/StackArithmetic/StackTest/StackTest.cmp&quot;,true);" class="code">StackTest.cmp</a>
    </td>
  </tr>
</tbody></table>

<p class="project_text">
<b>Testing how the VM translator handles <i>memory access commands</i>:</b>
</p> 

<table class="tests">
  <tbody><tr class="tblheader">
    <td>Program</td>
    <td>Description</td>
    <td>Test Scripts</td>
  </tr>
  <tr>
    <td>	
	<a onmouseover="popup(&quot;projects/07/MemoryAccess/BasicTest/BasicTest.vm&quot;,true);" class="code">BasicTest.vm</a>
    </td><td>Executes <span class="code">push</span>/<span class="code">pop</span> operations using the virtual memory segments <span class="code">constant</span>, <span class="code">local</span>, <span class="code">argument</span>, <span class="code">this</span>, <span class="code">that</span>, and <span class="code">temp</span>.
    </td>
    <td>
    <a onmouseover="popup(&quot;projects/07/MemoryAccess/BasicTest/BasicTestVME.tst&quot;,true);" class="code">BasicTestVME.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/MemoryAccess/BasicTest/BasicTest.tst&quot;,true);" class="code">BasicTest.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/MemoryAccess/BasicTest/BasicTest.cmp&quot;,true);" class="code">BasicTest.cmp</a>
    </td>
  </tr>
  <tr>
    <td>
	<a onmouseover="popup(&quot;projects/07/MemoryAccess/PointerTest/PointerTest.vm&quot;,true);" class="code">PointerTest.vm</a>
    </td>
    <td>Executes <span class="code">push</span>/<span class="code">pop</span> operations using the virtual memory segments <span class="code">pointer</span>, <span class="code">this</span>, and <span class="code">that</span>.</td>
    <td> <a onmouseover="popup(&quot;projects/07/MemoryAccess/PointerTest/PointerTestVME.tst&quot;,true);" class="code">PointerTestVME.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/MemoryAccess/PointerTest/PointerTest.tst&quot;,true);" class="code">PointerTest.tst</a>
	<a onmouseover="popup(&quot;projects/07/MemoryAccess/PointerTest/PointerTest.cmp&quot;,true);" class="code">PointerTest.cmp</a>
    </td>
  </tr>
  <tr>
    <td>
    <a onmouseover="popup(&quot;projects/07/MemoryAccess/StaticTest/StaticTest.vm&quot;,true);" class="code">StaticTest.vm</a>
    </td>
    <td> Executes <span class="code">push</span>/<span class="code">pop</span> operations using the virtual memory segment <span class="code">static</span>.
    </td>
    <td>
    <a onmouseover="popup(&quot;projects/07/MemoryAccess/StaticTest/StaticTestVME.tst&quot;,true);" class="code">StaticTestVME.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/MemoryAccess/StaticTest/StaticTest.tst&quot;,true);" class="code">StaticTest.tst</a><br>
	<a onmouseover="popup(&quot;projects/07/MemoryAccess/StaticTest/StaticTest.cmp&quot;,true);" class="code">StaticTest.cmp</a>
    </td>
  </tr>
</tbody></table>

<span class="project_desc">Tips</span>

<p class="project_text">
<b>Initialization:</b> In order for the translated VM code to execute on the host computer platform, the translated code stream (written in the machine language of the host platform) must include some bootstrap code that maps the stack on the host RAM and starts executing the code proper. In addition, the virtual memory segments must be mapped on selected areas in the host RAM. The bootstrap code and the memory mappings are described in chapter 8 and handled by the final version of the VM translator, implemented in the next project. In the current project you should worry about none of these issues, since all the necessary VM initializations and memory mappings are handled by the supplied test scripts. In other words, the assembly code that your translator generates should contain the translation of the VM commands found in the input file, and nothing else.
</p>

<p class="project_text">
<b>Steps:</b> 
</p>

<p class="project_text">For each one of the five test programs supplied above, follow these steps: </p>
<ol>
  <li>To get acquainted with the intended behavior of the supplied test program <span class="code">Xxx.vm</span>, run it on the supplied <i>VM emulator</i> using the supplied <span class="code">XxxVME.tst</span> script.</li>
  <li>Use your VM translator to translate the supplied <span class="code">Xxx.vm</span> file. The result should be a new text file containing Hack assembly code, named <span class="code">Xxx.asm</span>.</li>
  <li>Inspect the <span class="code">Xxx.asm</span> program generated by your VM translator. If there are visible syntax (or any other) errors, debug and fix your VM translator.</li>
  <li>To check if the generated code performs properly, use the supplied <span class="code">Xxx.tst</span> and <span class="code">Xxx.cmp</span> files to run the <span class="code">Xxx.asm</span> program on the supplied <i>CPU emulator</i>. If there are any problems, debug and fix your VM translator.</li>
</ol>

<p class="project_text">
<b>Implementation Order:</b> The supplied test programs were carefully planned to test the incremental features introduced by each development stage of your basic VM translator. Therefore, it's important to implement your translator in the proposed order, and to test it using the appropriate test programs at each stage. Implementing a later stage before an early one may cause the test programs to fail.
</p>

<p class="project_text">
<b>When you are done with this project</b>, be sure to save a copy of your VM translator. In the next project you will be asked to modify and extend this program, adding the handling of more VM commands. If your project 8 modifications will end up breaking some of the working code developed in project 7, you’ll be able to resort to a clean backup version. </p>

<span class="project_desc">Tools</span>

<p class="project_text">
Before setting out to develop your VM translator, we recommend getting acquainted with the virtual machine architecture model and language. As mentioned above, this can be done by running, and experimenting with, the supplied <span class="code">.vm</span> test programs using the supplied <i>VM emulator</i>.
</p>

<p class="project_text">
<b>The VM emulator:</b> This Java program, located in your <span class="code">nand2tetris/tools</span> directory, is designed to execute VM programs in a direct and visual way, without having to first translate them into machine language. For example, you can use the supplied VM emulator to see - literally speaking - how <span class="code">push</span> and <span class="code">pop</span> commands effect the stack. And, you can use the simulator to execute any one of the supplied <span class="code">.vm</span> test programs. For more information, see the <i>VM emulator tutorial</i> (<a href="http://www.nand2tetris.org/tutorials/PPT/VM%20Emulator%20Tutorial.ppt" target="_blank"><img align="ABSMIDDLE" src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/powerpoint.gif" alt="PowerPoint Format" width="16" height="16"></a> <a href="http://www.nand2tetris.org/tutorials/PDF/VM%20Emulator%20Tutorial.pdf" target="_blank"><img align="ABSMIDDLE" src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/acrobat.gif" alt="Portable Document Format" width="16" height="16"></a> ). 
</p>

<span class="project_text">
Here is a typical screen shot of the VM emulator in action:
<p></p>

<p class="project_text">
<img src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/VM Emulator.gif"></p>

<p class="project_text">

			</p></span></div>
		</div>
		<div class="small">
			Best viewed with 
							<img src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/compatible_firefox.gif">
							<img src="./The Elements of Computing Systems _ Nisan &amp; Schocken_files/compatible_chrome.gif"><br>
			Designed and built by Tali Gutman ©
		</div>
	
	
</body></html>